{"low": [{"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 37, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/applications/app-service/src/main/java/co/com/bancolombia/config/HealthConfig.java", "filename": "applications/app-service/src/main/java/co/com/bancolombia/config/HealthConfig.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 37, "end": 37, "column": {"start": 13, "end": 30}}, "sink": {"start": 37, "end": 37, "column": {"start": 13, "end": 30}, "content": ""}, "parent_line_number": 37, "fingerprint": "f9c6a5c5816d148535334d7f05b8cc70_0", "old_fingerprint": "fe1ea3103e5a6f29303ce680cdfed2f0_2", "code_extract": "            log.info(details);", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 51, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/applications/app-service/src/main/java/co/com/bancolombia/config/HealthConfig.java", "filename": "applications/app-service/src/main/java/co/com/bancolombia/config/HealthConfig.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 51, "end": 51, "column": {"start": 13, "end": 38}}, "sink": {"start": 51, "end": 51, "column": {"start": 13, "end": 38}, "content": ""}, "parent_line_number": 51, "fingerprint": "f9c6a5c5816d148535334d7f05b8cc70_1", "old_fingerprint": "fe1ea3103e5a6f29303ce680cdfed2f0_4", "code_extract": "            log.error(e.getMessage());", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 52, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/driven-adapters/rest-consumer/src/main/java/co/com/bancolombia/consumer/RestConsumer.java", "filename": "infrastructure/driven-adapters/rest-consumer/src/main/java/co/com/bancolombia/consumer/RestConsumer.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 52, "end": 52, "column": {"start": 41, "end": 74}}, "sink": {"start": 52, "end": 52, "column": {"start": 41, "end": 74}, "content": ""}, "parent_line_number": 52, "fingerprint": "a50d735e7ec918a20b8556c74ad84f04_0", "old_fingerprint": "631a0d545633c707f79b3d0f6bbc3320_5", "code_extract": "                .doOnError(throwable -> log.error(throwable.getMessage()))", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 78, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/driven-adapters/rest-consumer/src/main/java/co/com/bancolombia/consumer/RestConsumer.java", "filename": "infrastructure/driven-adapters/rest-consumer/src/main/java/co/com/bancolombia/consumer/RestConsumer.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 78, "end": 78, "column": {"start": 41, "end": 74}}, "sink": {"start": 78, "end": 78, "column": {"start": 41, "end": 74}, "content": ""}, "parent_line_number": 78, "fingerprint": "a50d735e7ec918a20b8556c74ad84f04_1", "old_fingerprint": "631a0d545633c707f79b3d0f6bbc3320_7", "code_extract": "                .doOnError(throwable -> log.error(throwable.getMessage()))", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 115, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/driven-adapters/rest-consumer/src/main/java/co/com/bancolombia/consumer/RestConsumer.java", "filename": "infrastructure/driven-adapters/rest-consumer/src/main/java/co/com/bancolombia/consumer/RestConsumer.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 115, "end": 115, "column": {"start": 41, "end": 74}}, "sink": {"start": 115, "end": 115, "column": {"start": 41, "end": 74}, "content": ""}, "parent_line_number": 115, "fingerprint": "a50d735e7ec918a20b8556c74ad84f04_2", "old_fingerprint": "631a0d545633c707f79b3d0f6bbc3320_8", "code_extract": "                .doOnError(throwable -> log.error(throwable.getMessage()))", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 28, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/entry-points/scheduled-extraction/src/main/java/co/com/bancolombia/scheduledextraction/ExtractData.java", "filename": "infrastructure/entry-points/scheduled-extraction/src/main/java/co/com/bancolombia/scheduledextraction/ExtractData.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 28, "end": 28, "column": {"start": 52, "end": 85}}, "sink": {"start": 28, "end": 28, "column": {"start": 52, "end": 85}, "content": ""}, "parent_line_number": 28, "fingerprint": "d70e9c45d5f7b43b372aaea67877d829_0", "old_fingerprint": "411064cc967c85ddd67de138fc01b9dc_0", "code_extract": "                .subscribe(log::info, throwable -> log.error(throwable.getMessage()));", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 35, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/entry-points/scheduled-extraction/src/main/java/co/com/bancolombia/scheduledextraction/ExtractData.java", "filename": "infrastructure/entry-points/scheduled-extraction/src/main/java/co/com/bancolombia/scheduledextraction/ExtractData.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 35, "end": 35, "column": {"start": 52, "end": 85}}, "sink": {"start": 35, "end": 35, "column": {"start": 52, "end": 85}, "content": ""}, "parent_line_number": 35, "fingerprint": "d70e9c45d5f7b43b372aaea67877d829_1", "old_fingerprint": "411064cc967c85ddd67de138fc01b9dc_1", "code_extract": "                .subscribe(log::info, throwable -> log.error(throwable.getMessage()));", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 37, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/helpers/parquet/src/main/java/co/com/bancolombia/parquet/ParquetFileGenerator.java", "filename": "infrastructure/helpers/parquet/src/main/java/co/com/bancolombia/parquet/ParquetFileGenerator.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 37, "end": 37, "column": {"start": 13, "end": 38}}, "sink": {"start": 37, "end": 37, "column": {"start": 13, "end": 38}, "content": ""}, "parent_line_number": 37, "fingerprint": "721d7565069138b11ae0ca177977fcb7_0", "old_fingerprint": "ca0c29ccacf3caa48843b3a089675bc1_3", "code_extract": "            log.error(e.getMessage());", "snippet": ""}, {"cwe_ids": ["532"], "id": "java_lang_logger_leak", "title": "Leakage of information in logger message", "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)", "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger_leak", "line_number": 74, "full_filename": "/Users/sagavir/Documents/Repositorios/Bancolombia/NU0429001_devsecops_engine_backend_HB_MR/ms_extractor/infrastructure/helpers/scanreader/src/main/java/co/com/bancolombia/scanreader/ScanReader.java", "filename": "infrastructure/helpers/scanreader/src/main/java/co/com/bancolombia/scanreader/ScanReader.java", "category_groups": ["PII", "Personal Data"], "source": {"start": 74, "end": 74, "column": {"start": 13, "end": 60}}, "sink": {"start": 74, "end": 74, "column": {"start": 13, "end": 60}, "content": ""}, "parent_line_number": 74, "fingerprint": "119275c67c59c62000a3d3b4ed0da72a_0", "old_fingerprint": "e32a84ecc73107b1dedc46f139df4e06_6", "code_extract": "            log.error(\"Error proccesing \" + repositoryName);", "snippet": ""}]}