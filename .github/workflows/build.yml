name: Build

on:
  # push:
  #   branches:
  #     - feature/*

  pull_request:
    branches:
      - trunk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install virtualenv
          sudo apt-get update
          sudo apt-get install openssh-client -y

      # - name: Prepare analysis on SonarQube
      #   uses: SonarSource/sonarqube-scan-action@v1
      #   with:
      #     projectBaseDir: ${{ github.workspace }}/$pathComponentName
      #     projectName: devsecops-engine-tools
      #     projectVersion: ${{ github.run_number }}
      #     extraProperties: |
      #       sonar.verbose=true
      #       sonar.sources=${{ github.workspace }}/$pathComponentName
      #       sonar.python.coverage.reportPaths=${{ github.workspace }}/$pathComponentName/coverage.xml
      #       sonar.language=py
      #       sonar.exclusions=**test_integrations_defect_dojo.py**,**/test/**,**/example/**,**setup.py**,**hello_world**,**Dockerfile**,**/coverage/**
      #       sonar.coverage.exclusions=**test_integrations_defect_dojo.py**,**/test/**,**/example/**,**setup.py**,**hello_world**,**Dockerfile/**,**/coverage/**

      - name: Run Unit Test
        run: |
          cd tools/
          python -m virtualenv _venv
          source _venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements_test.txt
          python -m pip install -r requirements.txt
          python -m pytest -x --cov=devsecops_engine_tools --cov-config=.coveragerc
          python -m coverage report -m
          python -m coverage xml

      - name: Integration Test
        run: |
          cd tools/
          source _venv/bin/activate
          python test_integrations_defect_dojo.py
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOKEN_CMDB: ${{ secrets.TOKEN_CMDB }}
          TOKEN_DEFECT_DOJO: ${{ secrets.TOKEN_DEFECT_DOJO }}
      
      - name: Build
        # if: contains(github.ref,'refs/pull/') || contains(github.ref,'refs/heads/trunk')
        run: |
          cd tools/
          source _venv/bin/activate
          python -m pip install setuptools virtualenv wheel
          python setup.py bdist_wheel
      
      - name: Store the distribution packages
        # if: contains(github.ref,'refs/pull/') || contains(github.ref,'refs/heads/trunk')
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: tools/dist/

  release_dev:
      # if: contains(github.ref,'refs/pull/')
      needs:
        - build
      runs-on: ubuntu-latest
      permissions:
        id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      steps:

        - name: Download the distribution packages
          uses: actions/download-artifact@v3
          with:
            name: python-package-distributions
            path: tools/dist/

        - name: Publish a Python distribution to PyPI Test
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            packages-dir: tools/dist/
            repository-url: https://test.pypi.org/devsecops-engine-tools/
            password: ${{ secrets.TEST_PYPI_API_TOKEN }}




